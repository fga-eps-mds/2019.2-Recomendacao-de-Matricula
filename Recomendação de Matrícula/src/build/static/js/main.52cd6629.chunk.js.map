{"version":3,"sources":["components/title.js","components/mwlink.js","components/conteudo.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","button","margin","spacing","Titulo","AppBar","position","Box","textAlign","MwLink","classes","Button","color","variant","size","className","paper","height","width","Conteudo","Grid","container","justify","alignItems","direction","item","App","bgcolor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAMMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QAKb,SAASC,IACJN,IAChB,OACE,kBAACO,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAAKC,UAAU,UACb,oE,YCdJV,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QAIb,SAASM,IACpB,IAAMC,EAAUZ,IAChB,OACE,kBAACa,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,KAAK,QAAQC,UAAWL,EAAQT,QAA5E,oBCJN,IAAMH,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCgB,MAAO,CACLC,OAAQ,IACRC,MAAO,SAIE,SAASC,IACPrB,IACjB,OACA,kBAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,WAAW,SAASC,UAAU,SAASF,QAAQ,UAE7D,kBAACF,EAAA,EAAD,CAAMK,MAAI,GACN,kBAAClB,EAAA,EAAD,CAAKC,UAAU,SAASS,OAAQ,KAC9B,sGAMN,kBAACG,EAAA,EAAD,CAAMK,MAAI,GACR,kBAAChB,EAAD,SCdSiB,MAVf,WAEE,OACA,kBAACnB,EAAA,EAAD,CAAKW,MAAO,IAAKD,OAAQ,IAAKU,QAAQ,YACpC,kBAACvB,EAAD,MACA,kBAACe,EAAD,QCAgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52cd6629.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar'\nimport Box from '@material-ui/core/Box'\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n\n  }));\n\nexport default function Titulo(){\n    const classes = useStyles();\n    return(\n      <AppBar position='static'>\n        <Box textAlign='center'>\n          <h4>  \n            Recomendação de Matrícula \n          </h4>\n        </Box>\n      </AppBar>\n    );\n  }","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n  }));\n\nexport default function MwLink(){\n    const classes = useStyles();\n    return(\n      <Button color='primary' variant='contained' size='large' className={classes.button}>\n        Matrícula Web\n      </Button>\n    );\n  }","import Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box'\n\nimport Titulo from './title';\nimport MwLink from './mwlink';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      height: 140,\n      width: 250,\n    },\n  }));\n\nexport default function Conteudo(){\n const classes = useStyles();\nreturn(\n<Grid container justify='center'>  \n  <Grid container alignItems='center' direction='column' justify='center'>\n\n    <Grid item>\n        <Box textAlign='center' height={300}>\n          <h3>\n            Acesse o Matrícula Web, ou Clique no Link para ser Redirecionado. \n          </h3>\n        </Box>  \n    </Grid>\n\n    <Grid item>\n      <MwLink/>\n    </Grid>\n\n  </Grid>\n</Grid>\n\n);\n}","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Conteudo from './components/conteudo';\nimport Titulo from './components/title'\n\nfunction App() {\n\n  return (\n  <Box width={300} height={450} bgcolor='grey.300'>     \n    <Titulo/>\n    <Conteudo/>\n  </Box>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}