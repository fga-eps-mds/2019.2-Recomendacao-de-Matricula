{"version":3,"sources":["pages/StepByStep.js","pages/NotMatriculaWeb.js","components/title.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","height","width","buttonSuccess","backgroundColor","green","StepByStep","classes","useState","React","loading","setLoading","success","setSuccess","timer","useRef","chrome","extension","getBackgroundPage","useEffect","clearTimeout","current","buttonClassname","clsx","Grid","container","justify","alignItems","direction","item","Box","textAlign","Fab","aria-label","color","className","onClick","setTimeout","CircularProgress","size","fabProgress","NotMatriculaWeb","isMW","setIsMW","bgpage","setInterval","isMatriculaWeb","console","log","paddingTop","display","justifyContent","flexDirection","spacing","Button","component","Link","to","variant","button","margin","Titulo","AppBar","position","App","bgcolor","exact","path","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kVAaMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,cAAe,CACbC,gBAAiBC,IAAM,KACvB,UAAW,CACTD,gBAAiBC,IAAM,WAMhB,SAASC,IACvB,IAAMC,EAAUV,IADmB,EAEXW,qBAFW,gCAGLC,IAAMD,UAAS,IAHV,mBAG5BE,EAH4B,KAGnBC,EAHmB,OAILF,IAAMD,UAAS,GAJV,mBAI5BI,EAJ4B,KAInBC,EAJmB,KAK7BC,EAAQL,IAAMM,SAEPC,OAAOC,UAAUC,oBAE9BT,IAAMU,WAAU,WACf,OAAO,WACLC,aAAaN,EAAMO,YAElB,IAEH,IAAMC,EAAkBC,YAAK,eAC1BhB,EAAQJ,cAAgBS,IAezB,OAAO,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UAC/B,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACE,WAAW,SAASC,UAAU,SAASF,QAAQ,UAE7D,kBAACF,EAAA,EAAD,CAAMK,MAAI,GACL,kBAACC,EAAA,EAAD,CAAKC,UAAU,SAAS9B,OAAQ,KAC9B,sJAGA,6BACE,kBAAC+B,EAAA,EAAD,CACEC,aAAW,OACXC,MAAM,UACNC,UAAWb,EACXc,QAzBW,WACnB1B,IACHG,GAAW,GACXF,GAAW,GACXG,EAAMO,QAAUgB,YAAW,WACzBxB,GAAW,GACXF,GAAW,KACV,QAoBSC,EAAU,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAE9BF,GAAW,kBAAC4B,EAAA,EAAD,CAAkBC,KAAM,GAAIJ,UAAW5B,EAAQiC,iBAKjE,kBAAChB,EAAA,EAAD,CAAMK,MAAI,GACR,2C,oBCtEHhC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,cAAe,CACbC,gBAAiBC,IAAM,KACvB,UAAW,CACTD,gBAAiBC,IAAM,WAMhB,SAASoC,IACvB,IAAMlC,EAAUV,IADwB,EAEhBW,qBAFgB,mBAEjCkC,EAFiC,KAE3BC,EAF2B,KAIpCC,EAAS5B,OAAOC,UAAUC,oBAU7B,OAPD2B,aAAY,WACXF,EAAQC,EAAOE,kBACd,KAEFC,QAAQC,IAAIN,GAKT,kBAAClB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACI,EAAA,EAAD,CAAKmB,WAAY,GAAIC,QAAQ,OAAOC,eAAe,WAAWC,cAAc,eAC1E,kBAAC5B,EAAA,EAAD,CAAMK,MAAI,GACR,kBAACS,EAAA,EAAD,QAGL,kBAACd,EAAA,EAAD,CAAMC,WAAS,EAACE,WAAW,SAASC,UAAU,SAASF,QAAQ,WAAW2B,QAAS,GAGjF,kBAAC7B,EAAA,EAAD,CAAMK,MAAI,GACL,kBAACC,EAAA,EAAD,CAAKC,UAAU,UACb,sGAMN,kBAACP,EAAA,EAAD,CAAMK,MAAI,GACR,kBAACyB,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,cAAcvB,MAAM,UAAUwB,QAAQ,YAAYnB,KAAK,QAAQJ,UAAW5B,EAAQoD,QAA9G,uB,YCrDJ9D,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4D,OAAQ,CACNC,OAAQ7D,EAAMsD,QAAQ,QAKb,SAASQ,IACJhE,IAChB,OACE,kBAACiE,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACjC,EAAA,EAAD,CAAKC,UAAU,UACb,oE,YCiBKiC,MAvBf,WAAgB,IAAD,EAE+BxD,mBAAS,IAFxC,mBASb,OATa,UAIbW,qBAAU,cAGR,IAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAACW,EAAA,EAAD,CAAK5B,MAAO,IAAKD,OAAQ,IAAKgE,QAAQ,YACpC,kBAACJ,EAAD,MACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIZ,UAAWd,IACjC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,cAAcZ,UAAWjD,IAC3C,kBAAC,IAAD,CAAU8D,KAAK,IAAIX,GAAG,UChBVY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.22c79b7b.chunk.js","sourcesContent":["/*global chrome*/\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box'\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport clsx from 'clsx';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\n//import Button from '@material-ui/core/Button';\nimport DnsIcon from '@material-ui/icons/Dns';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      height: 140,\n      width: 250,\n    },\n    buttonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700],\n      },\n    },\n   \n  }));\n\nexport default function StepByStep(){\n const classes = useStyles();\n const [isMW, setIsMW] = useState();\n const [loading, setLoading] = React.useState(false);\n const [success, setSuccess] = React.useState(false);\n const timer = React.useRef();\n\n let bgpage = chrome.extension.getBackgroundPage();   \n \n React.useEffect(() => {\n  return () => {\n    clearTimeout(timer.current);\n  };\n  }, []);\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  const handleButtonClick = () => {\n    if (!loading) {\n      setSuccess(false);\n      setLoading(true);\n      timer.current = setTimeout(() => {\n        setSuccess(true);\n        setLoading(false);\n      }, 10000);\n    }\n  };\n\n\n    return(<Grid container justify='center'>  \n    <Grid container alignItems='center' direction='column' justify='center'>\n\n      <Grid item>\n           <Box textAlign='center' height={300}>\n             <h3>\n               Acesse seu QUADRO RESUMO e em seguida entre na página de oferta de disciplinas para as disciplinas serem destacadas\n             </h3>\n             <div>\n               <Fab\n                 aria-label=\"save\"\n                 color=\"primary\"\n                 className={buttonClassname}\n                 onClick={handleButtonClick}\n               >\n                 {success ? <CheckIcon /> : <DnsIcon />}\n               </Fab>\n             {loading && <CircularProgress size={68} className={classes.fabProgress} />}\n             </div>\n          </Box>  \n       </Grid>\n\n       <Grid item>\n         <h2>Legenda:</h2>\n\n       </Grid>\n\n     </Grid>\n   </Grid>);\n}","/*global chrome*/\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\n\nimport {Link} from 'react-router-dom'; \n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      height: 140,\n      width: 250,\n    },\n    buttonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700],\n      },\n    },\n   \n  }));\n\nexport default function NotMatriculaWeb(){\n const classes = useStyles();\n const [isMW, setIsMW] = useState();\n \n let bgpage = chrome.extension.getBackgroundPage();   \n \n\n setInterval(function(){\n  setIsMW(bgpage.isMatriculaWeb);\n },1000);\n //setIsMW(bgpage.isMatriculaWeb);\n console.log(isMW);\n \n  //Caso o usuario não esteja no matricula web\n  return(\n    \n    <Grid container justify='center'>  \n      <Box paddingTop={12} display=\"flex\" justifyContent=\"flex-end\" flexDirection=\"row-reverse\">\n        <Grid item>\n          <CircularProgress/>\n        </Grid>\n      </Box>\n     <Grid container alignItems='center' direction='column' justify='flex-end' spacing={5}>\n\n\n       <Grid item>\n            <Box textAlign='center'>              \n              <h3>\n                Acesse o Matrícula Web, ou Clique no Link para ser Redirecionado.\n              </h3>\n           </Box>  \n        </Grid>\n\n        <Grid item>\n          <Button component={Link} to='/StepByStep' color='primary' variant='contained' size='large' className={classes.button}>\n            Matrícula Web\n          </Button>\n        </Grid>\n\n      </Grid>\n    </Grid>\n    \n    );\n  }\n\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar'\nimport Box from '@material-ui/core/Box'\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n\n  }));\n\nexport default function Titulo(){\n    const classes = useStyles();\n    return(\n      <AppBar position='static'>\n        <Box textAlign='center'>\n          <h4>  \n            Recomendação de Matrícula \n          </h4>\n        </Box>\n      </AppBar>\n    );\n  }","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\nimport StepByStep from './pages/StepByStep';\nimport NotMatriculaWeb from './pages/NotMatriculaWeb';\nimport Titulo from './components/title'\n\nimport { BrowserRouter, Route, Link, Switch, Redirect} from 'react-router-dom';\n\n\nfunction App() {\n  \n  const[isMatriculaWeb, setisMatriculaWeb ] = useState([]);\n\n  useEffect(()=>{\n \n\n  },[]);\n\n  return (\n  <BrowserRouter>\n    <Switch>\n    <Box width={300} height={450} bgcolor='grey.300'>     \n      <Titulo/>\n        <Route exact path='/' component={NotMatriculaWeb} />\n        <Route exact path='/StepByStep' component={StepByStep} />\n        <Redirect from='*' to='/' />\n    </Box>  \n    </Switch>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}